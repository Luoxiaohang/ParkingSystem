<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fire.modules.berth.mapper.BerthMapper">
	<sql id="where_berth">
		<trim suffixOverrides="AND">
			<if test="zoneId!=null ">
				and berth.zoneId=#{zoneId}
			</if>
			<if test="statusId!=null">
				and berth.statusId=#{statusId}
			</if>
		</trim>
	</sql>

	<sql id="where_berth_book_records">
		<trim suffixOverrides="AND">
			<if test="userId!=null ">
				and records.userId=#{userId}
			</if>
			<if test="berthId!=null ">
				and records.berthId=#{berthId}
			</if>
			<if test="carId!=null ">
				and records.carId=#{carId}
			</if>
		</trim>
	</sql>

	<sql id="set_berth">
		<trim suffixOverrides=",">
			<if test="zoneId!=null">zoneId=#{zoneId},</if>
			<if test="statusId!=null">statusId=#{statusId},</if>
			<if test="remark!=null">remark=#{remark},</if>
		</trim>
	</sql>
	<sql id="set_berth_book">
		<trim suffixOverrides=",">
			<if test="fromTime!=null">fromTime=#{fromTime},</if>
			<if test="toTime!=null">toTime=#{toTime},</if>
			<if test="status!=null">status=#{status},</if>
			<if test="cost!=null">cost=#{cost},</if>
			<if test="carId!=null">carId=#{carId},</if>
			<if test="statusId!=null">statusId=#{statusId},</if>
		</trim>
	</sql>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		berth
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="Berth">
		insert into berth
		(zoneId,statusId,remark)
		values
		(#{zoneId,jdbcType=INTEGER},
		#{statusId,jdbcType=INTEGER},
		#{remark,jdbcType=VARCHAR}
		)
	</insert>

	<insert id="addBookRecord" parameterType="BerthBook">
		insert into
		berth_book_records
		(berthId,userId,parkingId,zoneId,carId,bookTime,fromTime,toTime,cost,statusId,standardId)
		values
		(#{berthId,jdbcType=INTEGER},
		#{userId,jdbcType=INTEGER},
		#{parkingId,jdbcType=INTEGER},
		#{zoneId,jdbcType=INTEGER},
		#{carId,jdbcType=VARCHAR},
		#{bookTime,jdbcType=TIMESTAMP},
		#{fromTime,jdbcType=TIMESTAMP},
		#{toTime,jdbcType=TIMESTAMP},
		#{cost,jdbcType=INTEGER},
		#{statusId,jdbcType=INTEGER},
		#{standardId,jdbcType=INTEGER}
		)
	</insert>

	<update id="updateBookRecordByPrimaryKey" parameterType="BerthBook">
		update
		berth_book_records
		<set>
			<include refid="set_berth_book"></include>
		</set>
		where id=#{id}
	</update>

	<update id="updateByPrimaryKey" parameterType="Berth">
		update BERTH
		<set>
			<include refid="set_berth"></include>
		</set>
		where id=#{id}
	</update>

	<select id="selectByPrimaryKey" resultType="Berth"
		parameterType="java.lang.Integer">
		select berth.id, zoneId,statusId,status.text status
		from
		berth,status
		where id=#{id}
		and berth.statusId=status.id
	</select>

	<select id="getByZoneId" resultType="Berth" parameterType="java.lang.Integer">
		select berth.id,
		berth.zoneId,berth.statusId,status.text
		status,parking.id parkingId,parking.`name` parkingName,zone.id
		zoneId,zone.`name` zoneName,
		charge_standard.name
		chargeStandardName,charge_mode.name chargeModeName,charge_mode.id
		chargeModeId,charge_standard.id chargeStandardId
		from
		berth,status,parking,zone,charge_mode,charge_standard
		where
		berth.statusId=status.id
		and berth.zoneId=zone.id
		and
		zone.parkingId=parking.id
		and
		zone.chargingStandardId=charge_standard.id
		and
		charge_standard.modeId=charge_mode.id
		and
		berth.zoneId=#{zoneId,jdbcType=INTEGER}
	</select>

	<select id="getBookedBerths" resultType="BerthBook"
		parameterType="BerthBook">
		select
		records.id,records.carId,records.userId,records.fromTime,records.toTime,records.berthId,records.bookTime,records.cost,
		records.zoneId,records.statusId,status.text
		status,parking.name
		parkingName,zone.name zoneName
		from
		berth_book_records
		records,status,parking,zone
		<where>
			<include refid="where_berth_book_records"></include>
		</where>
		<if test="fromTime!=null ">
			and records.fromTime &lt; #{toTime}
		</if>

		<if test="toTime!=null ">
			and records.toTime &gt; #{fromTime}
		</if>
		and
		records.statusId=status.id
		and
		records.parkingId=parking.id
		and
		records.zoneId=zone.id
		ORDER BY
		records.fromTime
	</select>

	<select id="getValidBookedRecords" resultType="BerthBook"
		parameterType="BerthBook">
		select
		records.id,records.userId,records.carId,records.fromTime,records.toTime,records.berthId,records.bookTime,records.cost,
		records.zoneId,records.statusId,status.text
		status,parking.name
		parkingName,zone.name zoneName
		from
		berth_book_records
		records,status,parking,zone
		<where>
			<include refid="where_berth_book_records"></include>
		</where>
		<if test="toTime!=null ">
			and records.toTime &gt; #{toTime}
		</if>
		and
		records.statusId=status.id
		and
		records.parkingId=parking.id
		and
		records.zoneId=zone.id
		ORDER BY
		records.fromTime
	</select>

	<select id="getSaleDates" resultType="BerthBook">
		select
		bookTime ,cost
		from
		berth_book_records
	</select>

	<select id="selectAll" resultType="Berth">
		select berth.id,
		berth.zoneId,berth.statusId,status.text
		status,parking.id
		parkingId,parking.`name` parkingName,zone.id
		zoneId,zone.`name`
		zoneName,
		charge_standard.name
		chargeStandardName,charge_mode.name
		chargeModeName,charge_mode.id
		chargeModeId,charge_standard.id
		chargeStandardId
		from
		berth,status,parking,zone,charge_mode,charge_standard
		where
		berth.statusId=status.id
		and berth.zoneId=zone.id
		and
		zone.parkingId=parking.id
		and
		zone.chargingStandardId=charge_standard.id
		and
		charge_standard.modeId=charge_mode.id
	</select>

	<select id="getBookedRecordFromTimeBetweenDate" resultType="Users"
		parameterType="BerthBook">
		select users.nickName,users.phone
		from
		berth_book_records LEFT JOIN users
		on berth_book_records.fromTime >= #{fromTime}
		and berth_book_records.fromTime &lt; #{toTime}
		and users.id=berth_book_records.userId
	</select>
</mapper>