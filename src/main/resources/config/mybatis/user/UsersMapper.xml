<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fire.modules.user.mapper.UsersMapper">
	<resultMap id="BaseResultMap" type="Users">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="account" property="account" jdbcType="VARCHAR" />
		<result column="nickName" property="nickName" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="INTEGER" />
		<result column="Email" property="Email" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="roleName" property="roleName" jdbcType="VARCHAR" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="QQ" property="QQ" jdbcType="VARCHAR" />
		<result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
		<result column="roleId" property="roleId" jdbcType="INTEGER" />
	</resultMap>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from users
		where id = #{id,jdbcType=INTEGER}
	</delete>
	
	<insert id="insert" parameterType="Users">
		insert into users (
		account, nickName,
		gender, Email, phone,
		password, 
		roleId,address,QQ,birthday
		)
		values (
		#{account,jdbcType=VARCHAR},
		#{nickName,jdbcType=VARCHAR},
		#{gender,jdbcType=INTEGER},
		#{Email,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{roleId,jdbcType=INTEGER},
		#{address,jdbcType=INTEGER},
		#{QQ,jdbcType=INTEGER},
		#{birthday,jdbcType=INTEGER}
		)
	</insert>
	<update id="updateByPrimaryKey" parameterType="Users">
		update users
		set
		nickName =
		#{nickName,jdbcType=VARCHAR},
		address =
		#{address,jdbcType=INTEGER},
		QQ =
		#{QQ,jdbcType=INTEGER},
		birthday =
		#{birthday,jdbcType=INTEGER}
		where
		id
		=
		#{id,jdbcType=INTEGER}
	</update>

	<update id="updatePhoneById" parameterType="Users">
		update users
		set
		phone
		=
		#{phone,jdbcType=VARCHAR}
		where
		id =
		#{id,jdbcType=INTEGER}
	</update>
	<update id="updatePasswordById" parameterType="Users">
		update users
		set
		password
		=
		#{password,jdbcType=VARCHAR}
		where
		id =
		#{id,jdbcType=INTEGER}
	</update>
	<update id="updateEmailById" parameterType="Users">
		update users
		set
		Email
		=
		#{Email,jdbcType=VARCHAR}
		where
		id =
		#{id,jdbcType=INTEGER}
	</update>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select users.id, account, nickName, gender,
		Email,address,QQ,birthday,
		phone,
		password, 
		roleId ,
		from
		users
		where users.id
		=#{id,jdbcType=INTEGER}
	</select>

	<select id="checkEmail" resultMap="BaseResultMap" parameterType="java.lang.String">
		select id, account, nickName, gender, Email, phone,
		password,
		roleId
		from users
		where Email
		=#{email}
	</select>

	<select id="checkAccount" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select id, account, nickName, gender, Email, phone,
		password,
		roleId
		from users
		where account
		=#{account}
	</select>

	<select id="checkPhone" resultMap="BaseResultMap" parameterType="java.lang.String">
		select id, account, nickName, gender, Email, phone,
		password,
		roleId
		from users
		where phone
		=#{phone}
	</select>

	<select id="selectAll" resultMap="BaseResultMap">
		select users.id,
		account,address,QQ,birthday,
		nickName,
		gender, Email, phone,
		roleId , 
		role.id roleId,role.name roleName
		from
		users,role
		where
		role.id=users.roleId
	</select>

	<select id="getTotalCount" resultType="java.lang.Integer">
		select IFNULL(sum(1),0)
		from users
	</select>

	<select id="getSystemUserList" resultMap="BaseResultMap">
		select
		users.id,address,QQ,birthday,
		account,
		nickName,
		gender, Email, phone,
		roleId , 
		role.id roleId,role.name
		roleName
		from users,role
		where
		role.id=users.roleId
		and
		users.id>#{start} LIMIT #{limit}
	</select>

	<select id="login" resultMap="BaseResultMap">
		select users.id, account,
		nickName,address,QQ,birthday,
		gender, Email, phone,
		password,
		roleId
		from users where
		account=#{account} and password=#{password}
	</select>

	<select id="confirmUser" resultMap="BaseResultMap">
		select id, account,
		nickName,
		gender, Email, phone,
		password,
		roleId
		from users where
		id=#{id} and
		password=#{password}
	</select>

	<select id="resetPassword" resultMap="BaseResultMap">
		update users
		set
		password =
		#{password,jdbcType=VARCHAR}
		where Email=#{Email}
	</select>
</mapper>